load(
    "//ign_bazel:cmake_configure_file.bzl",
    "cmake_configure_file",
)
load(
    "//ign_bazel:generate_include_header.bzl",
    "generate_include_header",
)
load(
    "//ign_bazel:ign_export_header.bzl",
    "ign_export_header",
)
load(
    "//ign_bazel:generate_yaml.bzl",
    "generate_yaml",
)
load(
    "@bazelruby_rules_ruby//ruby:defs.bzl",
    "ruby_binary",
    "ruby_library",
    "ruby_rspec",
    "ruby_test",
)

package(default_visibility = ["//visibility:public"])

PROJECT_NAME = "ignition-launch"

PROJECT_MAJOR = 3

PROJECT_MINOR = 0

PROJECT_PATCH = 0

IGN_DESIGNATION = "dome"

CMAKE_INSTALL_PREFIX = "./ign_launch"

IGN_DATA_INSTALL_DIR = "./ign_launch"

IGN_LAUNCH_PLUGIN_INSTALL_PATH = "./ign_launch"

library_location = "./ign_launch"

IGN_LIBRARY_PATH = "./ign_launch"

# Generates config.hh based on the version numbers in CMake code.
cmake_configure_file(
    name = "config",
    src = "include/ignition/launch/config.hh.in",
    out = "include/ignition/launch/config.hh",
    cmakelists = ["CMakeLists.txt"],
    defines = [
        "PROJECT_VERSION_PATCH=%d" % PROJECT_PATCH,
        "PROJECT_VERSION_MAJOR=%d" % PROJECT_MAJOR,
        "PROJECT_VERSION_MINOR=%d" % PROJECT_MINOR,
        "PROJECT_VERSION=%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR),
        "PROJECT_VERSION_FULL=%d.%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR, PROJECT_PATCH),  # noqa
        "PROJECT_NAME_NO_VERSION=%s" % PROJECT_NAME,
        "PROJECT_NAME=%s" % PROJECT_NAME,
        "PROJECT_NAME_LOWER=%s" % PROJECT_NAME,
        "IGN_DATA_INSTALL_DIR=%s" % IGN_DATA_INSTALL_DIR,
        "IGN_LAUNCH_PLUGIN_INSTALL_PATH=%s" % IGN_LAUNCH_PLUGIN_INSTALL_PATH,
        "CMAKE_INSTALL_PREFIX=%s" % CMAKE_INSTALL_PREFIX,
    ],
    visibility = ["//visibility:private"],
)

ign_export_header(
    name = "include/ignition/launch/Export.hh",
    export_base = "IGNITION_LAUNCH",
    lib_name = "ignition-launch",
    visibility = ["//visibility:private"],
)

public_headers_no_gen = [
    "include/ignition/launch/Plugin.hh",
]

private_headers = [
    "src/Manager.hh",
    "src/vendor/backward.hpp",
]

sources = [
    "src/ign.cc",
    "src/Manager.cc",
]

test_sources = [
    # "src/ign_TEST.cc",
    "src/Manager_TEST.cc",
]

plugins = [
    "joystick",
    "joy_to_twist",
]

generate_include_header(
    name = "launchhh_genrule",
    out = "include/ignition/launch.hh",
    hdrs = public_headers_no_gen + [
        "include/ignition/launch/config.hh",
        "include/ignition/launch/Export.hh",
    ],
)

public_headers = public_headers_no_gen + [
    "include/ignition/launch/config.hh",
    "include/ignition/launch/Export.hh",
    "include/ignition/launch.hh",
    "src/ign.hh",
]

cc_binary(
    name = "libignition-launch3.so",
    srcs = sources + private_headers + public_headers,
    defines = [
        "BAZEL_IGN_PREFIX='\"ign_tools/\"'",
    ],
    includes = [
        "include",
        "src",
    ],
    linkshared = True,
    deps = [
        "//ign_bazel:utilities",
        "//ign_common",
        "//ign_msgs",
        "//ign_plugin",
        "//ign_plugin/loader",
        "@zmq",
    ],
)

cc_library(
    name = "ign_launch",
    srcs = ["libignition-launch3.so"],
    hdrs = public_headers,
    includes = [
        "include",
        "src",
    ],
    visibility = ["//visibility:public"],
)

[cc_binary(
    name = "libignition-launch-%s.so" % plugin.replace("_", ""),
    srcs = glob(
        [
            "plugins/%s/*.cc" % plugin,
            "plugins/%s/*.hh" % plugin,
        ],
        allow_empty = False,
    ),
    linkshared = True,
    visibility = ["//visibility:public"],
    deps = [
        "//ign_bazel:utilities",
        "//ign_common",
        "//ign_common/events",
        "//ign_fuel_tools",
        "//ign_gazebo",
        "//ign_gazebo:ign_gazebo_systems",
        "//ign_gui",
        "//ign_launch",
        "//ign_msgs",
        "//ign_physics",
        "//ign_plugin",
        "//ign_plugin/register",
        "//ign_rendering",
        "//ign_transport",
        "//ign_transport/log:ign_transport-log",
        "//sdformat",
    ],
) for plugin in plugins]

cc_binary(
    name = "libignition-launch-gazebo.so",
    srcs = glob(
        [
            "plugins/gazebo_server/*.cc",
            "plugins/gazebo_server/*.hh",
        ],
        allow_empty = False,
    ),
    linkshared = True,
    deps = [
        "//ign_bazel:utilities",
        "//ign_common",
        "//ign_common/events",
        "//ign_fuel_tools",
        "//ign_gazebo",
        "//ign_gazebo:ign_gazebo_systems",
        "//ign_gui",
        "//ign_launch",
        "//ign_msgs",
        "//ign_physics",
        "//ign_plugin",
        "//ign_plugin/register",
        "//ign_rendering",
        "//ign_transport",
        "//ign_transport/log:ign_transport-log",
        "//sdformat",
    ],
)

cc_binary(
    name = "libignition-launch-gazebogui.so",
    srcs = glob(
        [
            "plugins/gazebo_gui/*.cc",
            "plugins/gazebo_gui/*.hh",
        ],
        allow_empty = False,
    ),
    linkshared = True,
    deps = [
        "//ign_bazel:utilities",
        "//ign_common",
        "//ign_common/events",
        "//ign_fuel_tools",
        "//ign_gazebo",
        "//ign_gazebo:ign_gazebo_systems",
        "//ign_gui",
        "//ign_launch",
        "//ign_msgs",
        "//ign_physics",
        "//ign_plugin",
        "//ign_plugin/register",
        "//ign_rendering",
        "//ign_transport",
        "//ign_transport/log:ign_transport-log",
        "//sdformat",
    ],
)

cc_binary(
    name = "libignition-launch-gazebo-factory.so",
    srcs = glob(
        [
            "plugins/gazebo_factory/*.cc",
            "plugins/gazebo_factory/*.hh",
        ],
        allow_empty = False,
    ),
    linkshared = True,
    deps = [
        "//ign_bazel:utilities",
        "//ign_common",
        "//ign_common/events",
        "//ign_fuel_tools",
        "//ign_gazebo",
        "//ign_gazebo:ign_gazebo_systems",
        "//ign_gui",
        "//ign_launch",
        "//ign_msgs",
        "//ign_physics",
        "//ign_plugin",
        "//ign_plugin/register",
        "//ign_rendering",
        "//ign_transport",
        "//ign_transport/log:ign_transport-log",
        "//sdformat",
    ],
)

cc_binary(
    name = "libignition-launch-websocket-server.so",
    srcs = glob(
        [
            "plugins/websocket_server/*.cc",
            "plugins/websocket_server/*.hh",
        ],
        allow_empty = False,
    ),
    linkopts = ["-lwebsockets"],
    linkshared = True,
    deps = [
        "//ign_bazel:utilities",
        "//ign_common",
        "//ign_common/events",
        "//ign_fuel_tools",
        "//ign_gazebo",
        "//ign_gazebo:ign_gazebo_systems",
        "//ign_gui",
        "//ign_launch",
        "//ign_msgs",
        "//ign_physics",
        "//ign_plugin",
        "//ign_plugin/register",
        "//ign_rendering",
        "//ign_transport",
        "//ign_transport/log:ign_transport-log",
        "//sdformat",
    ],
)

cc_library(
    name = "ign-launch-plugins",
    visibility = ["//visibility:public"],
    deps = [":libignition-launch-%s.so" % plugin.replace("_", "") for plugin in plugins] + [
        "libignition-launch-websocket-server.so",
        "libignition-launch-gazebo-factory.so",
        "libignition-launch-gazebo.so",
        "libignition-launch-gazebogui.so",
    ],
)

[cc_test(
    name = src.replace("/", "_").replace(".cc", "").replace("src_", ""),
    srcs = [src] + private_headers,
    deps = [
        "//ign_bazel:utilities",
        "//ign_common",
        "//ign_common/events",
        "//ign_common/profiler",
        "//ign_fuel_tools",
        "//ign_gazebo",
        "//ign_gui",
        "//ign_launch",
        "//ign_launch/test:test_utils",
        "//ign_msgs",
        "//ign_plugin",
        "//ign_plugin/register",
        "//ign_rendering",
        "//ign_transport",
        "//sdformat",
        "@gtest",
        "@gtest//:gtest_main",
    ],
) for src in test_sources]

exports_files(["src/cmdlaunch.rb.in"])

exports_files(["CMakeLists.txt"])
